name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build --build-arg ENV=production -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }} -f Dockerfile .
        
      - name: Push Docker image
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Task Definition
        id: update-task-definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} > task-definition.json
          sed -i 's|<IMAGE_URI>|${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}|g' task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json
          NEW_REVISION=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query 'taskDefinition.revision' --output text)
          echo "NEW_REVISION=$NEW_REVISION" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --task-definition ${{ secrets.ECS_TASK_DEFINITION }}:${{ env.NEW_REVISION }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run integration tests
        run: |
          ./run-integration-tests.sh
        continue-on-error: true

      - name: Rollback on failure
        if: failure()
        run: |
          PREVIOUS_REVISION=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query 'services[0].deployments[0].taskDefinition' --output text | awk -F ':' '{print $2}')
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --task-definition ${{ secrets.ECS_TASK_DEFINITION }}:$PREVIOUS_REVISION
