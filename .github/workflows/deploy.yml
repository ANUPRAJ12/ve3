name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REGISTRY }}/my-app:latest --cache-from type=registry,ref=${{ secrets.ECR_REGISTRY }}/my-app:cache --tag ${{ secrets.ECR_REGISTRY }}/my-app:latest .

      - name: Log in to Amazon ECR
        run: echo ${{ secrets.AWS_ACCESS_KEY_ID }} | docker login -u AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/my-app:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: my-ecs-service
          cluster: my-ecs-cluster

      - name: Run Integration Tests
        run: |
          # Replace this with your actual test command
          curl -f http://my-ecs-service-url || exit 1

      - name: Rollback on failure
        if: failure()
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: my-ecs-service
          cluster: my-ecs-cluster
          revision: ${{ github.event.before }}
