name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to ECR
      env:
        ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
      run: |
        IMAGE_TAG="${ECR_REPOSITORY_URI}:latest"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    - name: Deploy to ECS
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
        ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_SERVICE_NAME)
        CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REPOSITORY_URI:latest" '.taskDefinition.containerDefinitions | map(if .name == "web" then .image = $IMAGE else . end)')
        UPDATED_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --argjson CONTAINER_DEFINITIONS "$CONTAINER_DEFINITIONS" '.taskDefinition | .containerDefinitions = $CONTAINER_DEFINITIONS')
        UPDATED_TASK_DEFINITION_ARN=$(echo $UPDATED_TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)
        
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --task-definition $UPDATED_TASK_DEFINITION_ARN
